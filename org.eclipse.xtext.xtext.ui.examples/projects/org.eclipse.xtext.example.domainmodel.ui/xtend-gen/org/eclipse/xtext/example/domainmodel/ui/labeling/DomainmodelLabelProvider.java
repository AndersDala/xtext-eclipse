/**
 * generated by Xtext
 */
package org.eclipse.xtext.example.domainmodel.ui.labeling;

import com.google.inject.Inject;
import java.util.Iterator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.common.types.JvmArrayType;
import org.eclipse.xtext.common.types.JvmComponentType;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmIdentifiableElement;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.common.types.JvmTypeConstraint;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.example.domainmodel.domainmodel.Operation;
import org.eclipse.xtext.example.domainmodel.domainmodel.Property;
import org.eclipse.xtext.util.Strings;
import org.eclipse.xtext.xbase.ui.labeling.XbaseLabelProvider;

/**
 * Provides labels for a EObjects.
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
public class DomainmodelLabelProvider extends XbaseLabelProvider {
  @Inject
  public DomainmodelLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  @Override
  protected Object doGetImage(final Object element) {
    if (((element instanceof EObject) && (!(element instanceof JvmIdentifiableElement)))) {
      StringConcatenation _builder = new StringConcatenation();
      EClass _eClass = ((EObject) element).eClass();
      String _name = _eClass.getName();
      _builder.append(_name);
      _builder.append(".gif");
      return _builder;
    }
    return super.doGetImage(element);
  }
  
  public String text(final Property property) {
    StringBuilder builder = new StringBuilder();
    String _name = property.getName();
    String _notNull = Strings.notNull(_name);
    builder.append(_notNull);
    builder.append(" : ");
    JvmTypeReference _type = property.getType();
    this.append(builder, _type);
    return builder.toString();
  }
  
  public String text(final Operation operation) {
    StringBuilder builder = new StringBuilder();
    String _name = operation.getName();
    String _notNull = Strings.notNull(_name);
    builder.append(_notNull);
    builder.append("(");
    boolean isFirst = true;
    EList<JvmFormalParameter> _params = operation.getParams();
    for (final JvmFormalParameter param : _params) {
      {
        if ((!isFirst)) {
          builder.append(", ");
        }
        isFirst = false;
        JvmTypeReference _parameterType = param.getParameterType();
        this.append(builder, _parameterType);
      }
    }
    builder.append(") : ");
    JvmTypeReference _type = operation.getType();
    this.append(builder, _type);
    return builder.toString();
  }
  
  protected void append(final StringBuilder builder, final JvmTypeReference typeRef) {
    if ((typeRef instanceof JvmParameterizedTypeReference)) {
      final JvmType type = ((JvmParameterizedTypeReference)typeRef).getType();
      this.append(builder, type);
      EList<JvmTypeReference> arguments = ((JvmParameterizedTypeReference)typeRef).getArguments();
      boolean _isEmpty = arguments.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        builder.append("<");
        Iterator<JvmTypeReference> iterator = arguments.iterator();
        while (iterator.hasNext()) {
          {
            JvmTypeReference jvmTypeReference = iterator.next();
            this.append(builder, jvmTypeReference);
            boolean _hasNext = iterator.hasNext();
            if (_hasNext) {
              builder.append(",");
            }
          }
        }
        builder.append(">");
      }
    } else {
      if ((typeRef instanceof JvmWildcardTypeReference)) {
        builder.append("?");
        EList<JvmTypeConstraint> _constraints = ((JvmWildcardTypeReference)typeRef).getConstraints();
        Iterator<JvmTypeConstraint> iterator_1 = _constraints.iterator();
        while (iterator_1.hasNext()) {
          {
            JvmTypeConstraint constraint = iterator_1.next();
            if ((constraint instanceof JvmUpperBound)) {
              builder.append(" extends ");
            } else {
              builder.append(" super ");
            }
            JvmTypeReference _typeReference = constraint.getTypeReference();
            this.append(builder, _typeReference);
            boolean _hasNext = iterator_1.hasNext();
            if (_hasNext) {
              builder.append(" & ");
            }
          }
        }
      } else {
        if ((typeRef instanceof JvmGenericArrayTypeReference)) {
          JvmArrayType _type = ((JvmGenericArrayTypeReference)typeRef).getType();
          this.append(builder, _type);
        }
      }
    }
  }
  
  protected void append(final StringBuilder builder, final JvmType type) {
    if ((type instanceof JvmArrayType)) {
      JvmComponentType _componentType = ((JvmArrayType)type).getComponentType();
      this.append(builder, _componentType);
      builder.append("[]");
    } else {
      String _simpleName = type.getSimpleName();
      String _notNull = Strings.notNull(_simpleName);
      builder.append(_notNull);
    }
  }
}

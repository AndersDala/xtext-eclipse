«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»
«IMPORT org::eclipse::xtext::xtext::ui::wizard::project»
«IMPORT org::eclipse::xtext::xtext::ui::wizard::ecore2xtext»

«EXTENSION org::eclipse::xtext::xtext::ui::wizard::project::Extensions»

«DEFINE main FOR Ecore2XtextProjectInfo»
	«EXPAND workflow»
	«EXPAND Ecore2Xtext::grammar»
«ENDDEFINE»

«DEFINE workflow FOR Ecore2XtextProjectInfo»

«FILE basePackagePath+"/"+languageNameAbbreviation+".properties" -»
grammarURI=classpath:/«this.basePackagePath»/«this.languageNameAbbreviation».xtext
file.extensions=«this.firstFileExtension»
projectName=«this.projectName»
«ENDFILE»

«FILE basePackagePath+"/Generate"+languageNameAbbreviation+".mwe" -»
<!-- Generated by Xtext -->
<workflow>
    <property file="«basePackagePath»/«languageNameAbbreviation».properties"/>
	
	<property name="runtimeProject" value="../${projectName}"/>
	
	<bean class="org.eclipse.emf.mwe.utils.StandaloneSetup" platformUri="${runtimeProject}/..">
	«FOREACH EPackageInfos AS ePackageInfo»«IF ePackageInfo.EPackageJavaFQN!=null-»
		<registerGeneratedEPackage value="«ePackageInfo.EPackageJavaFQN»"/>
	«ENDIF»«ENDFOREACH-»
	</bean>
	
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${runtimeProject}/src-gen"/>
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${runtimeProject}.ui/src-gen"/>
	
	<component class="org.eclipse.xtext.generator.Generator">
		<pathRtProject value="${runtimeProject}"/>
		<pathUiProject value="${runtimeProject}.ui"/>
		<projectNameRt value="${projectName}"/>
		<projectNameUi value="${projectName}.ui"/>
		
		<language uri="${grammarURI}" fileExtensions="${file.extensions}">
			<!-- Java API to access grammar elements (required by several other fragments) -->
			<fragment class="org.eclipse.xtext.generator.grammarAccess.GrammarAccessFragment"/>
			
			<!-- uncomment this to generate the Java API for the EPackages -->
			<!--<fragment class="org.eclipse.xtext.generator.ecore.EcoreGeneratorFragment"/>-->
			
			<!-- the serialization component -->
			<fragment class="org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorFragment"/>
			
			<!-- a custom ResourceFactory for use with EMF -->
			<fragment class="org.eclipse.xtext.generator.resourceFactory.ResourceFactoryFragment" 
				fileExtensions="${file.extensions}"/>
				
			<!-- the Antlr parser -->
			<fragment class="de.itemis.xtext.antlr.XtextAntlrGeneratorFragment"> 
				<options class="de.itemis.xtext.antlr.AntlrOptions" backtrack="true" classSplitting="true"/>
			</fragment>
			
			<!-- java-based API for validation -->
			<fragment class="org.eclipse.xtext.generator.validation.JavaValidatorFragment">
                <composedCheck value="org.eclipse.xtext.validation.ImportUriValidator"/>
                <composedCheck value="org.eclipse.xtext.validation.NamesAreUniqueValidator"/>
            </fragment>
            
			<!-- scoping and exporting API -->
			<!--
			<fragment class="org.eclipse.xtext.generator.scoping.ImportNamespacesScopingFragment"/>
			<fragment class="org.eclipse.xtext.generator.exporting.QualifiedNamesFragment"/>
			-->
			
			<!-- scoping and exporting API -->
			<fragment class="org.eclipse.xtext.generator.scoping.ImportURIScopingFragment"/>
			<fragment class="org.eclipse.xtext.generator.exporting.SimpleNamesFragment"/>
			
			<!-- formatter API -->
			<fragment class="org.eclipse.xtext.generator.ecore2xtext.FormatterFragment"/>

			<!-- value coverter -->
			<fragment class="org.eclipse.xtext.generator.ecore2xtext.Ecore2XtextValueConverterServiceFragment"/>

			<!-- labeling API -->
			<fragment class="org.eclipse.xtext.ui.generator.labeling.LabelProviderFragment"/>

			<!-- outline API -->
			<fragment class="org.eclipse.xtext.ui.generator.outline.TransformerFragment"/>
			<fragment class="org.eclipse.xtext.ui.generator.outline.OutlineNodeAdapterFactoryFragment"/>

			<!-- java-based API for content assistance -->
			<fragment class="org.eclipse.xtext.ui.generator.contentAssist.JavaBasedContentAssistFragment"/>
			<!-- Antlr based content assist fragment -->
			<fragment class="de.itemis.xtext.antlr.XtextAntlrUiGeneratorFragment"> 
				<options class="de.itemis.xtext.antlr.AntlrOptions" backtrack="true" classSplitting="true"/>
			</fragment>

			<!-- builder integration -->
			<fragment class="org.eclipse.xtext.generator.builder.BuilderIntegrationFragment"/>

			<!-- project wizard (optional) -->
			<!--
			<fragment class="org.eclipse.xtext.ui.generator.projectWizard.SimpleProjectWizardFragment"
				generatorProjectName="${projectName}.generator" modelFileExtension="${file.extensions}"/>
			-->
		</language>
	</component>
</workflow>
«ENDFILE»
«ENDDEFINE»
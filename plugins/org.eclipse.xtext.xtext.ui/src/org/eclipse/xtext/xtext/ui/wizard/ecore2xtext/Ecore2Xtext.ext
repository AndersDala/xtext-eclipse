/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/

import org::eclipse::emf::ecore;
import org::eclipse::xtext::xtext::ui::wizard::project;
import org::eclipse::xtext::xtext::ui::wizard::ecore2xtext;


cached Collection[EClassifier] allConcreteRuleClassifiers(Ecore2XtextProjectInfo this) :
	rootElementClass == null 
		? EPackageInfos.EPackage.allReferencedClassifiers(false).flatten().toSet().select(c|c.needsConcreteRule())
	    : (let c = { rootElementClass } : rootElementClass.allAssignedClassifiers(c) -> c.select(c|c.needsConcreteRule()).toSet());

cached Collection[EClass] allDispatcherRuleClasses(Ecore2XtextProjectInfo this) :
	rootElementClass == null
		? EPackageInfos.EPackage.allReferencedClassifiers(false).flatten().toSet().select(c|c.needsDispatcherRule())
		: allConcreteRuleClassifiers().typeSelect(EClass).collect(c|c.EAllReferences.select(r|r.needsAssignment()).EType).flatten().toSet();

cached Collection[EPackage] allReferencedEPackages(Ecore2XtextProjectInfo this) :
	EPackageInfos.EPackage.allReferencedEPackages(true).flatten().toSet();

private cached Collection[EPackage] allReferencedEPackages(EPackage this, boolean includeCrossRefs) :	
	allReferencedClassifiers(includeCrossRefs).EPackage.toSet();

private cached Collection[EClassifier] allReferencedClassifiers(EPackage this, boolean includeCrossRefs) :
	EClassifiers.union(EClassifiers.typeSelect(EClass).EAllStructuralFeatures.select(f|f.needsAssignment() && (includeCrossRefs || f.isContainment())).EType.flatten()).add(eString()).toSet();
	
private cached allAssignedClassifiers(EClass this, Collection acceptor) :
	(let classifiers = (EAllStructuralFeatures.select(f|f.needsAssignment()).EType).union(subClasses()).removeAll(acceptor) :
		classifiers.isEmpty 
			? null
			: (acceptor.addAll(classifiers) -> classifiers.typeSelect(EClass).collect(c|c.allAssignedClassifiers(acceptor))));
	
Void debug(String this):
	JAVA org.eclipse.xtext.xtext.ui.wizard.ecore2xtext.UniqueNameUtil.debug(java.lang.String);
	
private EClassifier eString() :
	JAVA org.eclipse.xtext.xtext.ui.wizard.ecore2xtext.UniqueNameUtil.eString();
	
String importURI(EPackage this) :
	JAVA org.eclipse.xtext.xtext.ui.wizard.ecore2xtext.UniqueNameUtil.importURI(org.eclipse.emf.ecore.EPackage);
	
fqn(EClassifier this):
	(EPackage.uniqueName() == null)? name : EPackage.uniqueName() + "::" + name;

Void resetUniqueNames(EPackageInfo defaultPackageInfo):
	 JAVA org.eclipse.xtext.xtext.ui.wizard.ecore2xtext.UniqueNameUtil.clearUniqueNames(org.eclipse.xtext.xtext.ui.wizard.ecore2xtext.EPackageInfo);

String uniqueName(ENamedElement this):
	 JAVA org.eclipse.xtext.xtext.ui.wizard.ecore2xtext.UniqueNameUtil.uniqueName(org.eclipse.emf.ecore.ENamedElement);

String uniqueImplName(ENamedElement this):
	 JAVA org.eclipse.xtext.xtext.ui.wizard.ecore2xtext.UniqueNameUtil.uniqueImplName(org.eclipse.emf.ecore.ENamedElement);

cached prefixFeatures(EClass this) :
	EAllStructuralFeatures.select(f|f.needsAssignment() && f.isPrefixBooleanFeature());
	
cached inlinedFeatures(EClass this) :
	EAllStructuralFeatures.select(f|f.needsAssignment()).remove(idAttribute()).removeAll(prefixFeatures());

cached onlyOptionalFeatures(EClass this) :
	prefixFeatures().union(inlinedFeatures()).select(f|f.required).isEmpty;
		
assignedRuleCall(EAttribute this):
	(isPrefixBooleanFeature()) ? "'"+name+"'" : EType.uniqueName();

concreteRuleName(EClass this):
	needsDispatcherRule()? uniqueImplName() : uniqueName();
	
String dataTypeRuleBody(EDataType this) :
	switch (name) {
		case 'EBigDecimal': "INT? '.' INT" 
		case 'EBigInteger': intRuleBody()
		case 'EBoolean': booleanRuleBody()
		case 'EBooleanObject': booleanRuleBody()
		case 'EByte': intRuleBody()
		// case 'EByteArray': ??
		case 'EByteObject': intRuleBody()
		case 'EChar': intRuleBody()
		case 'ECharObject': intRuleBody()
		case 'EDouble': decimalRuleBody()
		case 'EDoubleObject': decimalRuleBody()
		case 'EFloat': decimalRuleBody()
		case 'EFloatObject': decimalRuleBody()				
		case 'EInt': intRuleBody()
		case 'EIntegerObject': intRuleBody()
		case 'ELong': intRuleBody()
		case 'ELongObject': intRuleBody()
		case 'EShort': intRuleBody()
		case 'EShortObject': intRuleBody()
		case 'EString': 'STRING | ID'
		default: "'" + name + "' /* TODO: implement this rule and an appropriate IValueConverter */"
	};
	
intRuleBody() :
	"'-'? INT";
	
decimalRuleBody() :
	"'-'? INT? '.' INT (('E'|'e') '-'? INT)?";
	
booleanRuleBody() :
	"'true' | 'false'";
	
assignmentKeyword(EStructuralFeature this) :
	isPrefixBooleanFeature() ? "" : "'" + name + "' ";  

quoteIfNeccesary(String this) :	
	isXtextKeyword() ? '^' + this : this;
	
isXtextKeyword(String this) :
	{ 'ML_COMMENT', 'ID', 'WS','INT', 'STRING', 'ANY_OTHER', 'SL_COMMENT', 
	  'returns', 'generate', 'terminal', 'with', 'hidden', 'enum', 'grammar', 
	  'import', 'as', 'current', 'fragment'
	}.contains(this);
	
idAttribute(EClass this) :
	idAttributeInternal() != null ? idAttributeInternal() : EAllAttributes.selectFirst(a|a.needsAssignment() && a.name == 'name' && a.EType.name=="EString" && !a.many);

private idAttributeInternal(EClass this) :
	EAllAttributes.selectFirst(a|a.needsAssignment() && a.ID);

isBoolean(EClassifier this) :	
	EDataType.isInstance(this) && {'EBoolean', 'EBooleanObject'}.contains(name) && isEcoreType();

isPrefixBooleanFeature(EStructuralFeature this) :
	EType.isBoolean() && !many && defaultValueLiteral != "true";
	
isString(EClassifier this) :	
	EDataType.isInstance(this) && name == 'EString' && isEcoreType();

isEcoreType(EClassifier this) :
	EPackage.nsURI == "http://www.eclipse.org/emf/2002/Ecore";

isID(EStructuralFeature this) :
	EAttribute.isInstance({this}) && ((EAttribute)this).ID;
	
boolean needsAssignment(EStructuralFeature this) :
	!derived && !transient && !(EReference.isInstance(this) && ((EReference)this).container) && !(EDataType.isInstance(this.EType) && !((EDataType) this.EType).serializable);

boolean needsConcreteRule(EClass this) :
	!abstract && !interface;
	
boolean needsConcreteRule(EClassifier this) :
	true;

boolean needsDispatcherRule(EClass this) :
	!subClasses().select(c|c.needsConcreteRule()).isEmpty;

boolean needsDispatcherRule(EClassifier this) :
	false;
	
isContainment(EStructuralFeature this) :
	false;
	
isContainment(EAttribute this) :
	true;
	
isContainment(EReference this) :
	containment;

cached subClasses(EClass this):
	EPackage.EClassifiers.typeSelect(EClass).select(c|c.EAllSuperTypes.contains(this));	
	
allAttributes(EClass this) :
	inlinedFeatures().typeSelect(EAttribute);
	
allCrossReferences(EClass this) :
	inlinedFeatures().typeSelect(EReference).select(r|!r.isContainment());
	
allContainmentReferences(EClass this) :
	inlinedFeatures().typeSelect(EReference).select(r|r.isContainment());
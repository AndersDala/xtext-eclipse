«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext::xtext::ui::wizard::project»

«EXTENSION org::eclipse::xtext::xtext::ui::wizard::project::Extensions»

«DEFINE main FOR XtextProjectInfo»

«FILE "model/MyModel."+fileExtension-»
/*
 * This is an example model
 */
type String

entity Leaf extends Composable {
  property name: String
}

entity Composite extends Composable {
  property content: Composable[]
}

entity Composable {
}
«ENDFILE»

«FILE "templates/Extensions.ext"-»
import «languageNameAbbreviation.toFirstLower()»;

listSubclasses(Entity this) :
	let subclasses = this.eRootContainer.eAllContents.typeSelect(Entity).select(e|e.extends == this).name:
		switch (subclasses.size) { 
			case 0: "no subclasses"
			case 1: "subclass: " + subclasses.toString(", ")
			default: subclasses.size.toString() + " subclasses: " + subclasses.toString(", ")
		};
«ENDFILE»

«FILE "templates/Template.xpt"-»
«OP()»IMPORT «languageNameAbbreviation.toFirstLower()»«CL()»

«OP()»EXTENSION templates::Extensions«CL()»

«OP()»DEFINE main FOR Model-«CL()»
«OP()»FILE "output.txt"-«CL()»
«OP()»FOREACH this.elements.typeSelect(Entity).sortBy(e|e.name) AS e-«CL()»
«OP()»e.name«CL()» has «OP()»e.listSubclasses()«CL()».
«OP()»ENDFOREACH-«CL()»
«OP()»ENDFILE-«CL()»
«OP()»ENDDEFINE«CL()»
«ENDFILE»

«FILE "workflow/"+languageNameAbbreviation+"Generator.mwe"-»
<workflow>
	<property name="modelFile" value="classpath:/model/MyModel.«fileExtension»"/>
	<property name="validateModel" value="true"/>
	<property name="targetDir" value="src-gen"/>
	<property name="cleanTargetDir" value="true"/>
	<property name="fileEncoding" value="«encoding»"/>
	<property name="skipOnErrors" value="true"/>

	<bean class="org.eclipse.emf.mwe.utils.StandaloneSetup" platformUri=".."/>

	<if cond="${cleanTargetDir}">
		<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${targetDir}"/>
	</if>

	<component class="org.eclipse.xtext.MweReader" uri="${modelFile}">
		<!-- this class will be generated by the xtext generator -->
		<register class="«languageName»StandaloneSetup"/>
		<validate value="${validateModel}"/>
	</component>

	<component class="org.eclipse.xpand2.Generator">
		<metaModel class="org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel"/>
		<expand value="templates::Template::main FOR model"/>
		<genPath value="${targetDir}"/>
		<fileEncoding value="${fileEncoding}"/>
		<skipOnErrors value="${skipOnErrors}"/>
	</component>
</workflow>
«ENDFILE»

«ENDDEFINE»

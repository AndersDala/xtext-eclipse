«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»
«DEFINE root FOR XtextProjectInfo»
«FILE "Generator.java" GENERATOR_OUTLET -»

package «this.basePackage»;

import java.io.IOException;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xpand2.XpandExecutionContextImpl;
import org.eclipse.xpand2.XpandFacade;
import org.eclipse.xpand2.output.Outlet;
import org.eclipse.xpand2.output.OutputImpl;
import org.eclipse.xtend.typesystem.emf.EmfMetaModel;
import org.eclipse.xtext.GeneratorFacade;
import org.eclipse.xtext.resource.ClassloaderClasspathUriResolver;
import org.eclipse.xtext.resource.XtextResourceSet;

import com.google.inject.Injector;

/**
 * Run this class to start the Generator<br>
 * generated with: <br>
 * org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/xtext/ui/wizard/project/
 * Generator.xpt
 */
public class Generator {
	private static final String SRC_GEN_PATH = "src-gen";

	public void generate() throws IOException {
		Injector injector = new «this.languageNameAbbreviation»StandaloneSetup().createInjectorAndDoEMFRegistration();
	
		GeneratorFacade.cleanFolder(SRC_GEN_PATH);

		String classpathUri = "classpath:/model/Model.«this.firstFileExtension»";
		ResourceSet rs = injector.getInstance(XtextResourceSet.class);
		Resource resource = rs.createResource(
		  new ClassloaderClasspathUriResolver().resolve(null, URI.createURI(classpathUri)));
		resource.load(null);
		EObject model = resource.getContents().get(0);
		System.out.println(model);

		OutputImpl output = new OutputImpl();
		String defaultEncoding = System.getProperty("file.encoding");
		output.addOutlet(new Outlet(false, defaultEncoding, null, true,	SRC_GEN_PATH));

		XpandExecutionContextImpl execCtx = new XpandExecutionContextImpl(output, null, null, null, null);
		execCtx.registerMetaModel(new EmfMetaModel(model.eClass().getEPackage()));

		// generate
		XpandFacade facade = XpandFacade.create(execCtx);
		facade.evaluate("templates::Template::root", model);
	}

	public static void main(String[] args) throws IOException {
		Generator generator = new Generator();
		generator.generate();
	}

}
«ENDFILE»
«ENDDEFINE»



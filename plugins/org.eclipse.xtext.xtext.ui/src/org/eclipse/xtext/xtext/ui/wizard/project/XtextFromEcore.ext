import org::eclipse::emf::ecore;
import org::eclipse::xtext::xtext::ui::wizard::project;

Collection[EPackage] allImportedEPackages(XtextProjectInfo this) :
	EPackagesForRules.allReferencedEPackages().flatten().toSet();

Collection[EPackage] allReferencedEPackages(EPackage this) :	
	allReferencedClassifiers().EPackage.toSet();

Collection[EClassifier] allReferencedClassifiers(EPackage this) :
	EClassifiers.union(EClassifiers.typeSelect(EClass).EAllStructuralFeatures.select(f|f.needsAssignment()).EType.flatten()).toSet();
	
fqn(EClassifier this):
	EPackage.uniqueName() + "::" + name;
	
Void calculateAliases() :
	calculateAliases();
	
Void clearUniqueNames():
	 JAVA org.eclipse.xtext.xtext.ui.wizard.project.XtextFromEcore.clearUniqueNames();

String uniqueName(ENamedElement this):
	 JAVA org.eclipse.xtext.xtext.ui.wizard.project.XtextFromEcore.uniqueName(org.eclipse.emf.ecore.ENamedElement);

cached prefixFeatures(EClass this) :
	EAllStructuralFeatures.select(f|f.needsAssignment() && f.EType.isBoolean());
	
cached inlinedFeatures(EClass this) :
	EAllStructuralFeatures.select(f|f.needsAssignment()).remove(idAttribute()).removeAll(prefixFeatures());

cached onlyOptionalFeatures(EClass this) :
	prefixFeatures().union(inlinedFeatures()).select(f|f.required).isEmpty;
		
assignedRuleCall(EAttribute this):
	if ((EClass) eContainer()).idAttribute() == this && EType.isString() then
		 'ID' 
	else if(EType.isEcoreType()
		 	&& {'EBoolean' , 'EBooleanObject'}.contains(EAttributeType.name) 
		 	&& !many) 
		then 
		 	"'"+name+"'" 
		else
		 	EType.uniqueName();
		 	
String dataTypeRuleBody(EDataType this) :
	switch (name) {
		case 'EBigDecimal': "INT? '.' INT" 
		case 'EBigInteger': intRuleBody()
		case 'EBoolean': booleanRuleBody()
		case 'EBooleanObject': booleanRuleBody()
		case 'EByte': intRuleBody()
		// case 'EByteArray': ??
		case 'EByteObject': intRuleBody()
		case 'EChar': intRuleBody()
		case 'ECharObject': intRuleBody()
		case 'EDouble': decimalRuleBody()
		case 'EDoubleObject': decimalRuleBody()
		case 'EFloat': decimalRuleBody()
		case 'EFloatObject': decimalRuleBody()				
		case 'EInt': intRuleBody()
		case 'EIntegerObject': intRuleBody()
		case 'ELong': intRuleBody()
		case 'ELongObject': intRuleBody()
		case 'EShort': intRuleBody()
		case 'EShortObject': intRuleBody()
		case 'EString': 'STRING | ID'
		default: "'" + name + "' /* TODO: implement this rule and an appropriate IValueConverter */"
	};
	
intRuleBody() :
	"'-'? INT";
	
decimalRuleBody() :
	"'-'? INT? '.' INT (('E'|'e') '-'? INT)?";
	
booleanRuleBody() :
	"'true' | 'false'";
	
assignmentKeyword(EStructuralFeature this) :
	EType.isBoolean() ? "" : "'" + name + "' ";  

quoteIfNeccesary(String this) :	
	isXtextKeyword() ? '^' + this : this;
	
isXtextKeyword(String this) :
	{ 'ML_COMMENT', 'ID', 'WS','INT', 'STRING', 'ANY_OTHER', 'SL_COMMENT', 
	  'returns', 'generate', 'terminal', 'with', 'hidden', 'enum', 'grammar', 
	  'import', 'as', 'current'
	}.contains(this);
	
idAttribute(EClass this) :
	idAttributeInternal() != null ? idAttributeInternal() : EAllAttributes.selectFirst(a|a.needsAssignment() && a.name == 'name' && a.EType.name=="EString" && !a.many);

private idAttributeInternal(EClass this) :
	EAllAttributes.selectFirst(a|a.needsAssignment() && a.ID);

isBoolean(EClassifier this) :	
	EDataType.isInstance(this) && {'EBoolean', 'EBooleanObject'}.contains(name) && isEcoreType();

isString(EClassifier this) :	
	EDataType.isInstance(this) && name == 'EString' && isEcoreType();

isEcoreType(EClassifier this) :
	EPackage.nsURI == "http://www.eclipse.org/emf/2002/Ecore";

isID(EStructuralFeature this) :
	EAttribute.isInstance({this}) && ((EAttribute)this).ID;
	
boolean needsAssignment(EStructuralFeature this) :
	!derived && !transient && !(EReference.isInstance(this) && ((EReference)this).container) && !(EDataType.isInstance(this.EType) && !((EDataType) this.EType).serializable);

isContainment(EStructuralFeature this) :
	false;
	
isContainment(EAttribute this) :
	true;
	
isContainment(EReference this) :
	containment;

cached subClasses(EClass this):
	EPackage.EClassifiers.typeSelect(EClass).select(c|c.ESuperTypes.contains(this));	
«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»
«IMPORT org::eclipse::xtext::xtext::ui::wizard::project»

«EXTENSION org::eclipse::xtext::xtext::ui::wizard::project::Extensions»

«DEFINE main(Boolean xpandBased) FOR XtextProjectInfo»
	«EXPAND workflow(xpandBased)»
	«EXPAND grammar»
«ENDDEFINE»

«DEFINE workflow(Boolean xpandBased) FOR XtextProjectInfo»

«FILE basePackagePath+"/Generate"+languageNameAbbreviation+".properties" -»
grammarURI=classpath:/«this.basePackagePath»/«this.languageNameAbbreviation».xtext
file.extensions=«this.firstFileExtension»
projectName=«this.projectName»
«ENDFILE»

«FILE basePackagePath+"/Generate"+languageNameAbbreviation+".mwe" -»
<workflow>
	<property file="«basePackagePath»/Generate«languageNameAbbreviation».properties"/>
	
	<property name="runtimeProject" value="../${projectName}"/>
	
	<bean class="org.eclipse.emf.mwe.utils.StandaloneSetup" platformUri="${runtimeProject}/.."/>
	
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${runtimeProject}/src-gen"/>
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${runtimeProject}.ui/src-gen"/>
	
	<component class="org.eclipse.xtext.generator.Generator">
		<pathRtProject value="${runtimeProject}"/>
		<pathUiProject value="${runtimeProject}.ui"/>
		<projectNameRt value="${projectName}"/>
		<projectNameUi value="${projectName}.ui"/>
		
		<language uri="${grammarURI}">
			<fragment class="org.eclipse.xtext.generator.BasicRuntimeFragment"/>
			
			<!-- Java API to access grammar elements (required by several other fragments) -->
			<fragment class="org.eclipse.xtext.generator.grammarAccess.GrammarAccessFragment"/>
			
			<!-- generates Java API for the generated EPackages -->
			<fragment class="org.eclipse.xtext.generator.ecore.EcoreGeneratorFragment"/>
			
			<!-- the packrat parser -->
			<fragment class="org.eclipse.xtext.generator.parser.PackratParserFragment"/>
			
			<!-- the serialization component -->
			<fragment class="org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorFragment"/>
			
			<!-- a custom ResourceFactory for use with EMF -->
			<fragment class="org.eclipse.xtext.generator.resourceFactory.ResourceFactoryFragment" 
				fileExtensions="${file.extensions}"/>
				
			<!-- the following fragment tries to use the Antlr Generator fragment which can be downloaded from http://www.itemis.com -->
			<fragment class="org.eclipse.xtext.generator.DelegatingGeneratorFragment" 
				delegate="de.itemis.xtext.antlr.XtextAntlrGeneratorFragment"
				message="You are generating without ANTLR. If this was not desired, please install the missing plugin 'de.itemis.xtext.antlr'."/>
			
			<!-- Basic UI setup -->
			<fragment class="org.eclipse.xtext.ui.generator.BasicUiGeneratorFragment"
			  fileExtensions="${file.extensions}"/>
			«IF xpandBased»
			<!-- check-based API for validation -->
			<fragment class="org.eclipse.xtext.generator.validation.CheckFragment"/>
			«ELSE»
			<!-- java-based API for validation -->
			<fragment class="org.eclipse.xtext.generator.validation.JavaValidatorFragment">
                <composedCheck value="org.eclipse.xtext.validation.ImportUriValidator"/>
            </fragment>
			«ENDIF»
            
			<!-- scoping API -->
			<fragment class="org.eclipse.xtext.generator.scoping.JavaScopingFragment"/>
			
			<!-- formatter API -->
			<fragment class="org.eclipse.xtext.generator.formatting.FormatterFragment"/>

			<!-- labeling API -->
			<fragment class="org.eclipse.xtext.ui.generator.labeling.LabelProviderFragment"/>

			<!-- outline API -->
			<fragment class="org.eclipse.xtext.ui.generator.outline.TransformerFragment"/>

			«IF xpandBased»
			<!-- xtend-based API for content assistance -->
			<fragment class="org.eclipse.xtext.ui.generator.contentAssist.XtendBasedContentAssistFragment"/>
			«ELSE»
			<!-- java-based API for content assistance -->
			<fragment class="org.eclipse.xtext.ui.generator.contentAssist.JavaBasedContentAssistFragment"/>
			«ENDIF»
		</language>
	</component>
</workflow>
«ENDFILE»

«ENDDEFINE»

«DEFINE grammar FOR XtextProjectInfo»
«FILE basePackagePath+"/"+languageNameAbbreviation+".xtext" -»
grammar «this.languageName» with org.eclipse.xtext.common.Terminals

generate «this.languageNameAbbreviation.toFirstLower()» "«this.nsURI»"


Model :
	(imports+=Import)*
	(elements+=Type)*;
	
Import :
	'import' importURI=STRING;
	
Type:
	DataType | Class;
	
DataType:
	'datatype' name=ID ';'?;
	
Class :
	'class' name=ID ('extends' superClass=[Class])? '{'
		properties+=Property*
	'}';

Property:
	Attribute | Reference;
	
Attribute:
	'attr' name=ID ':' type=[DataType] ';'?;
	
Reference:
	'ref' name=ID ':' type=[Class] ';'?;
«ENDFILE»
«ENDDEFINE»
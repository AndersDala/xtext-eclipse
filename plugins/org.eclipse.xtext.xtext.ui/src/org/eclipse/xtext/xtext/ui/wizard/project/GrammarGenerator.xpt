«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»
«DEFINE root FOR XtextProjectInfo»
«FILE this.languageNameAbbreviation+"Generator.java" GRAMMAR_GENERATOR_OUTLET -»

/*******************************************************************************
 * generated with "/org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/xtext/ui/wizard/project/GrammarGenerator.xpt"
 *******************************************************************************/
package «this.basePackage»;

import java.io.IOException;

import org.apache.log4j.Logger;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.GeneratorFacade;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.XtextStandaloneSetup;
import org.eclipse.xtext.resource.ClassloaderClasspathUriResolver;
import org.eclipse.xtext.resource.XtextResourceSet;

import com.google.inject.Injector;

/**
 * Run this class in order to generate the language '«this.languageNameAbbreviation»'.
 */
public class  «this.languageNameAbbreviation»Generator {
	private Logger log = Logger.getLogger( «this.languageNameAbbreviation»Generator.class);

	private static final String PATH = ".";
	private static final String UI_PATH = "../«this.projectName».ui";

	public void generate() throws IOException {
		Injector injector = new XtextStandaloneSetup().createInjectorAndDoEMFRegistration();

		GeneratorFacade.cleanFolder(PATH + "/src-gen");
		GeneratorFacade.cleanFolder(UI_PATH + "/src-gen");

		String classpathUri = "classpath:/«this.basePackagePath»/«this.languageNameAbbreviation».xtext";
		log.info("loading " + classpathUri);
		ResourceSet rs = injector.getInstance(XtextResourceSet.class);
		Resource resource = rs.createResource(
		  new ClassloaderClasspathUriResolver().resolve(null, URI.createURI(classpathUri)));
		resource.load(null);
		Grammar grammarModel = (Grammar) resource.getContents().get(0);
		GeneratorFacade.generate(grammarModel, PATH, UI_PATH, "«this.fileExtension»");
		log.info("Done.");
	}

	public static void main(String[] args) throws IOException {
		«this.languageNameAbbreviation»Generator generator = new «this.languageNameAbbreviation»Generator();
		generator.generate();
	}

}

«ENDFILE»
«ENDDEFINE»



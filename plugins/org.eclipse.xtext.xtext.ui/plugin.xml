<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.0"?>

<plugin>
	<extension-point id="wizardContribution" name="Wizard Contribution" schema="schema/org.eclipse.xtext.xtext.ui.wizardContribution.exsd"/>
	<extension
			point="org.eclipse.ui.editors">
		<editor
			class="org.eclipse.xtext.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.core.editor.XtextEditor"
			contributorClass="org.eclipse.ui.editors.text.TextEditorActionContributor"
			default="true"
			extensions="xtext,xtext2"
			id="org.eclipse.xtext.Xtext"
			name="%Xtext_Editor">
		</editor>
	</extension>
	
	<!-- Open declaration -->
	<extension
		point="org.eclipse.ui.handlers">
		<handler
			class="org.eclipse.xtext.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.common.editor.hyperlinking.OpenDeclarationHandler"
			commandId="org.eclipse.xtext.ui.common.editor.hyperlinking.OpenDeclaration">
			<activeWhen>
				<reference
					definitionId="org.eclipse.xtext.Xtext.Editor.opened">
				</reference>
			</activeWhen>
		</handler>
	</extension>
	<extension point="org.eclipse.core.expressions.definitions">
		<definition id="org.eclipse.xtext.Xtext.Editor.opened">
			<and>
				<reference definitionId="isActiveEditorAnInstanceOfXtextEditor"/>
				<with variable="activeEditor">
					<test property="org.eclipse.xtext.ui.core.editor.XtextEditor.languageName" 
						value="org.eclipse.xtext.Xtext" 
						forcePluginActivation="true"/>
				</with>
			</and>
		</definition>
	</extension>
	
	<!-- Preference pages -->
	<extension
			point="org.eclipse.ui.preferencePages">
		<page
			class="org.eclipse.xtext.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.core.editor.preferences.LanguageRootPreferencePage"
			id="org.eclipse.xtext.Xtext"
			name="%Xtext_Language_Root_Preferences">
			<keywordReference id="org.eclipse.xtext.ui.keyword_Xtext"/>
		</page>
		<page
			category="org.eclipse.xtext.Xtext"
			class="org.eclipse.xtext.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.common.editor.syntaxcoloring.SyntaxColoringPreferencePage"
			id="org.eclipse.xtext.Xtext.coloring"
			name="%Syntax_Coloring">
			<keywordReference id="org.eclipse.xtext.ui.keyword_Xtext"/>
		</page>
		<page
			category="org.eclipse.xtext.Xtext"
			class="org.eclipse.xtext.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.common.editor.templates.XtextTemplatePreferencePage"
			id="org.eclipse.xtext.Xtext.templates"
			name="%Templates">
			<keywordReference id="org.eclipse.xtext.ui.keyword_Xtext"/>
		</page>
	</extension>
	<extension
		point="org.eclipse.ui.keywords">
		<keyword
			id="org.eclipse.xtext.ui.keyword_Xtext"
			label="%Xtext_keyword"/>
	</extension>
	
	<!-- Resource factories -->
	<extension
		point="org.eclipse.emf.ecore.extension_parser">
		<parser
			class="org.eclipse.xtext.XtextExecutableExtensionFactory:org.eclipse.xtext.resource.IResourceFactory"
			type="xtext">
		</parser>
	</extension>

	<extension
		point="org.eclipse.emf.ecore.extension_parser">
		<parser
			class="org.eclipse.xtext.XtextExecutableExtensionFactory:org.eclipse.xtext.resource.IResourceFactory"
			type="xtext2">
		</parser>
	</extension>

	<!-- Wizards -->
	<extension
		point="org.eclipse.ui.newWizards">
		<category
			name="Xtext"
			id="org.eclipse.xtext.projectwiz">
		</category>
		<wizard
			category="org.eclipse.xtext.projectwiz"
			class="org.eclipse.xtext.XtextExecutableExtensionFactory:org.eclipse.xtext.xtext.ui.wizard.project.NewXtextProjectWizard"
			icon="icons/editor.gif"
			id="org.eclipse.xtext.xtext.ui.wizard.project.NewXtextProjectWizard"
			name="%Xtext_Project"
			project="true">
		</wizard>
	</extension>
	
	<!-- Outline context menu actions -->
	<!--
	<extension
		point="org.eclipse.ui.menus">
		<menuContribution
			locationURI="popup:org.eclipse.xtext.ui.common.outline?after=additions">
			<command
				commandId="org.eclipse.xtext.xtext.ui.editor.outline.SampleCommand"
				label="Sample action registered for ParserRule">
				<visibleWhen checkEnabled="false">
					<iterate>
						<adapt type="org.eclipse.xtext.ParserRule" />
					</iterate>
				</visibleWhen>
			</command>
		</menuContribution>
	</extension>
	<extension
		point="org.eclipse.ui.commands">
		<command
			id="org.eclipse.xtext.xtext.ui.editor.outline.SampleCommand"
			name="Sample Command"
			description="Just a sample command">
		</command>
	</extension>
	<extension
		point="org.eclipse.ui.handlers">
		<handler
			class="org.eclipse.xtext.xtext.ui.editor.outline.SampleOulineNodeHandler"
			commandId="org.eclipse.xtext.xtext.ui.editor.outline.SampleCommand">
		</handler>
	</extension>
	-->
	
	<extension
         point="org.eclipse.xtext.xtext.ui.wizardContribution">
      <generatorConfiguration name="Standard">
         <MweSnippet>
<![CDATA[<property name="runtimeProject" value="../${projectName}"/>
	
	<bean class="org.eclipse.emf.mwe.utils.StandaloneSetup" platformUri="${runtimeProject}/.."/>
	
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${runtimeProject}/src-gen"/>
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${runtimeProject}.ui/src-gen"/>
	
	<component class="org.eclipse.xtext.generator.Generator">
		<pathRtProject value="${runtimeProject}"/>
		<pathUiProject value="${runtimeProject}.ui"/>
		<projectNameRt value="${projectName}"/>
		<projectNameUi value="${projectName}.ui"/>
		
		<language uri="${grammarURI}" fileExtensions="${file.extensions}">
			<!-- Java API to access grammar elements (required by several other fragments) -->
			<fragment class="org.eclipse.xtext.generator.grammarAccess.GrammarAccessFragment"/>
			
			<!-- generates Java API for the generated EPackages -->
			<fragment class="org.eclipse.xtext.generator.ecore.EcoreGeneratorFragment"/>
			
			<!-- the serialization component -->
			<fragment class="org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorFragment"/>
			
			<!-- a custom ResourceFactory for use with EMF -->
			<fragment class="org.eclipse.xtext.generator.resourceFactory.ResourceFactoryFragment" 
				fileExtensions="${file.extensions}"/>
				
			<!-- the following fragment tries to use the Antlr Generator fragment which can be installed via update manager from http://download.itemis.com/updates/ -->
			<fragment class="org.eclipse.xtext.generator.AntlrDelegatingFragment" />
			
			<!-- If you don't want to use the Antlr fragment for some reason, remove the antlr fragment and uncomment the packrat parser fragment below.
			<fragment class="org.eclipse.xtext.generator.parser.PackratParserFragment"/>
			 -->
	
			<!-- check-based API for validation -->
			<!--
			<fragment class="org.eclipse.xtext.generator.validation.CheckFragment"/>
			 -->
			 
			<!-- java-based API for validation -->
			<fragment class="org.eclipse.xtext.generator.validation.JavaValidatorFragment">
                <composedCheck value="org.eclipse.xtext.validation.ImportUriValidator"/>
                <composedCheck value="org.eclipse.xtext.validation.NamesAreUniqueValidator"/>
            </fragment>
            
			<!-- scoping and exporting API -->
			<fragment class="org.eclipse.xtext.generator.scoping.ImportNamespacesScopingFragment"/>
			<fragment class="org.eclipse.xtext.generator.exporting.QualifiedNamesFragment"/>
			
			<!-- scoping and exporting API -->
			<!--
			<fragment class="org.eclipse.xtext.generator.scoping.ImportURIScopingFragment"/>
			<fragment class="org.eclipse.xtext.generator.exporting.SimpleNamesFragment"/>
			-->
			
			<!-- formatter API -->
			<fragment class="org.eclipse.xtext.generator.formatting.FormatterFragment"/>

			<!-- labeling API -->
			<fragment class="org.eclipse.xtext.ui.generator.labeling.LabelProviderFragment"/>

			<!-- outline API -->
			<fragment class="org.eclipse.xtext.ui.generator.outline.TransformerFragment"/>
			<fragment class="org.eclipse.xtext.ui.generator.outline.OutlineNodeAdapterFactoryFragment"/>

			<!-- java-based API for content assistance -->
			<fragment class="org.eclipse.xtext.ui.generator.contentAssist.JavaBasedContentAssistFragment"/>
			<!-- the following fragment tries to use the Antlr based content assist fragment which can be downloaded from http://www.itemis.com 
			     and will be ignored if it's not available. -->
			<fragment class="org.eclipse.xtext.generator.DelegatingGeneratorFragment" 
				delegate="de.itemis.xtext.antlr.XtextAntlrUiGeneratorFragment"
				message="You are generating without ANTLR. It is highly recommended to download and use the plugin 'de.itemis.xtext.antlr' \n\t using the update site http://download.itemis.com/updates/.">
			</fragment>
			<!-- <fragment class="de.itemis.xtext.antlr.XtextAntlrUiGeneratorFragment"/> --> 

			<!-- builder integration -->
			<fragment class="org.eclipse.xtext.generator.builder.BuilderIntegrationFragment"/>

			<!-- project wizard (optional) -->
			<!--
			<fragment class="org.eclipse.xtext.ui.generator.projectWizard.SimpleProjectWizardFragment"
				generatorProjectName="${projectName}.generator" modelFileExtension="${file.extensions}"/>
			-->
		</language>
	</component>]]>
         </MweSnippet>
      </generatorConfiguration>
   </extension>
   
   <extension
         point="org.eclipse.xtext.ui.core.languageBuilder">
      <languageBuilder
            class="org.eclipse.xtext.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.core.builder.ILanguageBuilder">
      </languageBuilder>
   </extension>
</plugin>

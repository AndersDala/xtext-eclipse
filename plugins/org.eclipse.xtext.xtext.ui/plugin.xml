<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.0"?>

<plugin>
	<extension-point id="wizardContribution" name="Wizard Contribution" schema="schema/org.eclipse.xtext.xtext.ui.wizardContribution.exsd"/>
	 <extension
            point="org.eclipse.ui.editors">
        <editor
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.XtextEditor"
            contributorClass="org.eclipse.ui.editors.text.TextEditorActionContributor"
            default="true"
            extensions="xtext,xtext2"
            id="org.eclipse.xtext.Xtext"
            name="Xtext Editor">
        </editor>
    </extension>
    <extension
        point="org.eclipse.ui.handlers">
        <handler
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.hyperlinking.OpenDeclarationHandler"
            commandId="org.eclipse.xtext.ui.editor.hyperlinking.OpenDeclaration">
            <activeWhen>
                <reference
                    definitionId="org.eclipse.xtext.Xtext.Editor.opened">
                </reference>
            </activeWhen>
        </handler>
        <handler
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.handler.ValidateActionHandler"
            commandId="org.eclipse.xtext.Xtext.validate">
         <activeWhen>
            <reference
                    definitionId="org.eclipse.xtext.Xtext.Editor.opened">
            </reference>
         </activeWhen>
      </handler>
    </extension>
    <extension point="org.eclipse.core.expressions.definitions">
        <definition id="org.eclipse.xtext.Xtext.Editor.opened">
            <and>
                <reference definitionId="isActiveEditorAnInstanceOfXtextEditor"/>
                <with variable="activeEditor">
                    <test property="org.eclipse.xtext.ui.editor.XtextEditor.languageName" 
                        value="org.eclipse.xtext.Xtext" 
                        forcePluginActivation="true"/>
                </with>        
            </and>
        </definition>
    </extension>
    <extension
            point="org.eclipse.ui.preferencePages">
        <page
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.preferences.LanguageRootPreferencePage"
            id="org.eclipse.xtext.Xtext"
            name="Xtext">
            <keywordReference id="org.eclipse.xtext.ui.keyword_Xtext"/>
        </page>
        <page
            category="org.eclipse.xtext.Xtext"
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.syntaxcoloring.SyntaxColoringPreferencePage"
            id="org.eclipse.xtext.Xtext.coloring"
            name="Syntax Coloring">
            <keywordReference id="org.eclipse.xtext.ui.keyword_Xtext"/>
        </page>
        <page
            category="org.eclipse.xtext.Xtext"
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.templates.XtextTemplatePreferencePage"
            id="org.eclipse.xtext.Xtext.templates"
            name="Templates">
            <keywordReference id="org.eclipse.xtext.ui.keyword_Xtext"/>
        </page>
    </extension>
    <extension
        point="org.eclipse.ui.keywords">
        <keyword
            id="org.eclipse.xtext.ui.keyword_Xtext"
            label="Xtext"/>
    </extension>
    <extension
         point="org.eclipse.ui.commands">
      <command
            description="Trigger expensive validation"
            id="org.eclipse.xtext.Xtext.validate"
            name="Validate">
      </command>
    </extension>
    <extension point="org.eclipse.ui.menus">
        <menuContribution
            locationURI="popup:#TextEditorContext?after=group.edit">
             <command
                 commandId="org.eclipse.xtext.Xtext.validate"
                 style="push"
                 tooltip="Trigger expensive validation">
            <visibleWhen checkEnabled="false">
                <reference
                    definitionId="org.eclipse.xtext.Xtext.Editor.opened">
                </reference>
            </visibleWhen>
         </command>  
         </menuContribution>
    </extension>
    <extension point="org.eclipse.ui.menus">
		<menuContribution locationURI="popup:#TextEditorContext?endof=group.find">
			<command commandId="org.eclipse.xtext.ui.editor.FindReferences">
				<visibleWhen checkEnabled="false">
                	<reference definitionId="org.eclipse.xtext.Xtext.Editor.opened">
                	</reference>
            	</visibleWhen>
			</command>
		</menuContribution>
	</extension>
	<extension point="org.eclipse.ui.handlers">
	    <handler
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.findrefs.FindReferencesHandler"
            commandId="org.eclipse.xtext.ui.editor.FindReferences">
            <activeWhen>
                <reference
                    definitionId="org.eclipse.xtext.Xtext.Editor.opened">
                </reference>
            </activeWhen>
        </handler>
    </extension>   

<!-- adding resource factories -->

	<extension
		point="org.eclipse.emf.ecore.extension_parser">
		<parser
			class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.resource.IResourceFactory"
			type="xtext">
		</parser>
	</extension>
	<extension point="org.eclipse.xtext.extension_resourceServiceProvider">
        <resourceServiceProvider
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.resource.IResourceUIServiceProvider"
            uriExtension="xtext">
        </resourceServiceProvider>
    </extension>

	<extension
		point="org.eclipse.emf.ecore.extension_parser">
		<parser
			class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.resource.IResourceFactory"
			type="xtext2">
		</parser>
	</extension>
	<extension point="org.eclipse.xtext.extension_resourceServiceProvider">
        <resourceServiceProvider
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.resource.IResourceUIServiceProvider"
            uriExtension="xtext2">
        </resourceServiceProvider>
    </extension>

	<!-- Wizards -->
	<extension
		point="org.eclipse.ui.newWizards">
		<category
			name="Xtext"
			id="org.eclipse.xtext.projectwiz">
		</category>
		<wizard
			category="org.eclipse.xtext.projectwiz"
			class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.xtext.ui.wizard.project.NewXtextProjectWizard"
			icon="icons/editor.gif"
			id="org.eclipse.xtext.xtext.ui.wizard.project.NewXtextProjectWizard"
			name="%Xtext_Project"
			project="true">
		</wizard>
		<wizard
			category="org.eclipse.xtext.projectwiz"
			class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.xtext.ui.wizard.ecore2xtext.NewXtextProjectFromEcoreWizard"
			icon="icons/editor.gif"
			id="org.eclipse.xtext.xtext.ui.wizard.ecore2xtext.NewXtextProjectFromEcoreWizard"
			name="%Xtext_Project_From_Ecore"
			project="true">
		</wizard>
	</extension>
	
	<!-- Outline context menu actions -->
	<!--
	<extension
		point="org.eclipse.ui.menus">
		<menuContribution
			locationURI="popup:org.eclipse.xtext.ui.outline?after=additions">
			<command
				commandId="org.eclipse.xtext.xtext.ui.editor.outline.SampleCommand"
				label="Sample action registered for ParserRule">
				<visibleWhen checkEnabled="false">
					<iterate>
						<adapt type="org.eclipse.xtext.ParserRule" />
					</iterate>
				</visibleWhen>
			</command>
		</menuContribution>
	</extension>
	<extension
		point="org.eclipse.ui.commands">
		<command
			id="org.eclipse.xtext.xtext.ui.editor.outline.SampleCommand"
			name="Sample Command"
			description="Just a sample command">
		</command>
	</extension>
	<extension
		point="org.eclipse.ui.handlers">
		<handler
			class="org.eclipse.xtext.xtext.ui.editor.outline.SampleOulineNodeHandler"
			commandId="org.eclipse.xtext.xtext.ui.editor.outline.SampleCommand">
		</handler>
	</extension>
	-->
	
	<extension
         point="org.eclipse.xtext.xtext.ui.wizardContribution">
      <generatorConfiguration name="Standard">
         <MweSnippet>
<![CDATA[
	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"

		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// generates Java API for the generated EPackages 
			fragment = ecore.EcoreGeneratorFragment {
//				referencedGenModels = "uri to genmodel, uri to next genmodel"
			}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}
				
			/* 
			 * The antlr parser generator fragment.
			 * If you don't already have it get it from http://download.itemis.com/updates/
			 */ 
			fragment = de.itemis.xtext.antlr.XtextAntlrGeneratorFragment {
//				options = {
//					backtrack = true
//				}
			}

			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
//				registerForImportedPackages = true
			}
            
			// scoping and exporting API
//			fragment = scoping.ImportURIScopingFragment {}
//			fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}	

			// formatter API 
			fragment = formatting.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
			fragment = outline.TransformerFragment {}
			fragment = outline.OutlineNodeAdapterFactoryFragment {}
			fragment = outline.QuickOutlineFragment {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}

			// content assist API  
			fragment = contentAssist.JavaBasedContentAssistFragment {}

			// generates a more lightweight Antlr parser and lexer for tailored content assist  
			fragment =  de.itemis.xtext.antlr.XtextAntlrUiGeneratorFragment {}

			// project wizard (optional) 
//			fragment = projectWizard.SimpleProjectWizardFragment {
//				generatorProjectName = "${projectName}.generator" 
//				modelFileExtension = file.extensions
//			}
		}
	}]]>
         </MweSnippet>
      </generatorConfiguration>
   </extension>
   <extension
         point="org.eclipse.debug.ui.launchShortcuts">
      <shortcut
            category="org.eclipse.ui.externaltools"
            class="org.eclipse.xtext.xtext.launcher.GenerateArtifactsLaunchShortcut"
            icon="icons/launch.gif"
            id="org.eclipse.xtext.xtext.launcher.GenerateArtifactsLaunchShortcut"
            label="%shortcut.label"
            modes="run, debug">
        <contextualLaunch>
           <enablement>
             <with variable="selection">
				<iterate>
					<and>
						<or>
							<adapt type="org.eclipse.xtext.Grammar" />
							<adapt type="org.eclipse.core.resources.IResource">
								<test property="org.eclipse.core.resources.name" value="*.xtext"/>
							</adapt>							
							<adapt type="org.eclipse.jface.text.ITextSelection">
								<reference definitionId="isActiveEditorAnInstanceOfXtextEditor"/>
							</adapt>
						</or>
						<test property="org.eclipse.xtext.xtext.launcher.workflowavailable" />
					</and>
				</iterate>
			</with>
           </enablement>
           <contextLabel
              mode="run"
              label="%contextLabel.run.label"/>
          <contextLabel
              mode="debug"
              label="%contextLabel.debug.label"/>
         </contextualLaunch>
      </shortcut>
   </extension>
   <extension point="org.eclipse.core.runtime.adapters">
      <factory 
         class="org.eclipse.xtext.xtext.ui.editor.outline.XtextContentOutlineNodeAdapterFactory" 
         adaptableType="org.eclipse.xtext.ui.editor.outline.ContentOutlineNode">
         <adapter type="org.eclipse.debug.ui.actions.ILaunchable"/>
      </factory>
      <factory
         adaptableType="org.eclipse.xtext.ui.editor.outline.ContentOutlineNode"
         class="org.eclipse.xtext.xtext.ui.editor.outline.XtextContentOutlineNodeAdapterFactory">
         <adapter type="org.eclipse.core.resources.IResource"/>
         <adapter type="org.eclipse.core.resources.IFile"/>
      </factory>
   </extension>
   <extension
         point="org.eclipse.core.expressions.propertyTesters">
      <propertyTester
            class="org.eclipse.xtext.xtext.launcher.WorkflowPropertyTester"
            id="org.eclipse.xtext.xtext.launcher.WorkflowPropertyTester"
            namespace="org.eclipse.xtext.xtext.launcher"
            properties="workflowavailable"
            type="java.lang.Object">
      </propertyTester>
   </extension>
	<!-- Quick Outline -->
	<extension
		point="org.eclipse.ui.handlers">
		<handler 
			class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.outline.quickoutline.ShowQuickOutlineActionHandler"
			commandId="org.eclipse.xtext.ui.editor.outline.QuickOutline">
			<activeWhen>
				<reference
					definitionId="org.eclipse.xtext.Xtext.Editor.opened">
				</reference>
			</activeWhen>
		</handler>
	</extension>
	<extension
		point="org.eclipse.ui.commands">
		<command
			description="Open the quick outline."
			id="org.eclipse.xtext.ui.editor.outline.QuickOutline"
			name="Quick Outline">
		</command>
	</extension>
	<extension point="org.eclipse.ui.menus">
		<menuContribution
			locationURI="popup:#TextEditorContext?after=group.open">
			<command commandId="org.eclipse.xtext.ui.editor.outline.QuickOutline"
				style="push"
				tooltip="Open Quick Outline">
				<visibleWhen checkEnabled="false">
					<reference definitionId="org.eclipse.xtext.Xtext.Editor.opened"/>
				</visibleWhen>
			</command>
		</menuContribution>
	</extension>
</plugin>

/*
* generated by Xtext
*/
package org.eclipse.xtext.example.css.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.example.css.xcss.IdSelector;
import org.eclipse.xtext.example.css.xcss.Selector;
import org.eclipse.xtext.example.css.xcss.StyleRule;
import org.eclipse.xtext.example.css.xcss.TypeSelector;
import org.eclipse.xtext.example.css.xcss.WildcardSelector;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class XcssLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public XcssLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	//Labels and icons can be computed like this:
	
	String text(StyleRule styleRule) {
	  StringBuilder result =new StringBuilder();
	  for (Selector selector : styleRule.getSelectors()) {
		  if (result.length()!=0) {
			  result.append(" ");
		  }
			if (selector instanceof TypeSelector) {
				result.append(((JvmDeclaredType)((TypeSelector) selector).getType()).getSimpleName());
			} else if (selector instanceof IdSelector) {
				result.append("#"+((IdSelector) selector).getId());
			} else {
				result.append("*");
			}
	  }
	  return result.length()>0? result.toString(): "?";
	}
	
	String text(WildcardSelector selector) {
		return "*";
	}
	 
	public String image(StyleRule component) {
		return "class_obj.gif";
	}
	
//	public String image(Import imp) {
//		return "imp_obj.gif";
//	}
	
}

module org.eclipse.xtext.example.GenerateEcoreDsl

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/eclipse/xtext/example/EcoreDsl.xtext"
var file.extensions = "ecoredsl"
var projectName = "org.eclipse.xtext.example.ecoredsl"
var runtimeProject = "../${projectName}"

Workflow {
	
	bean = StandaloneSetup {
		platformUri = "${runtimeProject}/.."
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}
	
	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}
			
			// Generate java classes for Ecore models
			fragment = ecore.EcoreGeneratorFragment {}
			
			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
			
			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}
				
			// the following fragment tries to use the Antlr Generator fragment which can be installed via update manager from http://download.itemis.com/updates/ -->
			fragment = de.itemis.xtext.antlr.XtextAntlrGeneratorFragment {
			}
			
			// java-based API for content assistance 
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			fragment = de.itemis.xtext.antlr.XtextAntlrUiGeneratorFragment {}
		}
	}
}

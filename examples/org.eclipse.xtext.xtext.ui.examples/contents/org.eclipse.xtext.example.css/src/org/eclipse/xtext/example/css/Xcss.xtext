grammar org.eclipse.xtext.example.css.Xcss with org.eclipse.xtext.xbase.Xbase

generate xcss "http://www.eclipse.org/xtext/example/css/Xcss"
import "http://www.eclipse.org/xtext/xbase/Xbase"
import "http://www.eclipse.org/xtext/common/JavaVMTypes"
import "http://www.eclipse.org/emf/2002/Ecore"

StyleSheet: {StyleSheet}
	rules+=StyleRule*;


StyleRule:
	selectors+=Selector+ '{'
		settings+=Setting*
	'}';

_JvmTypeReference returns JvmTypeReference:
  TypeSelector
;

Selector:
	(TypeSelector | WildcardSelector | IdSelector) filter=Filter?;

TypeSelector:
	type=[JvmType|QualifiedName];

IdSelector:
	'#' id=ID
;

WildcardSelector:
	{WildcardSelector} '*';

Filter returns XExpression:
	'[' XExpression ']';

Setting returns XExpression:
//	XOrExpression ({XAssignment.assignable=current} feature=[JvmIdentifyableElement|OpSettingAssign] value=XAssignment)? ';';
	  XExpression ';' 
	| {XAssignment} assignable=FeatureReference feature=[JvmIdentifyableElement|OpSettingAssign] value=XExpression ';';

OpSettingAssign:
	':';

FeatureReference returns XFeatureCall:
	feature=[JvmIdentifyableElement];

CssLiterals returns XExpression:
	FontLiteral | ColorLiteral | SizeLiteral;

FontLiteral:
	{FontLiteral}
	'font' name=StringOrID?
	(
	  (italic?='I')?
	& (bold?='B')?
	& (size?=SizeLiteral)?
	);

StringOrID:
	STRING | ID;

ColorLiteral:
	RGB | ColorConstant;

ColorConstant:
	'#' constant=[JvmIdentifyableElement];

RGB:
	'#' red = HEXINT ',' green = HEXINT ',' blue = HEXINT;
	
HEXINT returns EInt:
  INT ID? | ID
;
	
SizeLiteral:
	value=INT unit=SizeUnit;

enum SizeUnit:
	em | pt | px | percent='%';

XPrimaryExpression returns XExpression:
	CssLiterals |
	XClosure |
	XBooleanLiteral |
	XIntLiteral |
	XNullLiteral |
	XStringLiteral |
	XTypeLiteral |
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	XFeatureCall |
	XIfExpression |
	XForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XCastedExpression |
	XThrowExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression;

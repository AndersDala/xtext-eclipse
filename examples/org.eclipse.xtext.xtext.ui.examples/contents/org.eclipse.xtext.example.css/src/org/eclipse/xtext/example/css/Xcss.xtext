grammar org.eclipse.xtext.example.css.Xcss with org.eclipse.xtext.xbase.Xbase

generate xcss "http://www.eclipse.org/xtext/example/css/Xcss"
import "http://www.eclipse.org/xtext/xbase/Xbase"
import "http://www.eclipse.org/xtext/common/JavaVMTypes"
import "http://www.eclipse.org/emf/2002/Ecore"

StyleSheet: {StyleSheet}
	rules+=StyleRule*;


StyleRule:
	selectors+=Selector+ '{'
		settings+=Setting*
	'}';

_JvmTypeReference returns JvmTypeReference:
  TypeSelector
;

Selector:
	(TypeSelector | WildcardSelector | IdSelector) filter=Filter?;

TypeSelector:
	type=[JvmType|QualifiedName];

IdSelector:
	'#' id=ID
;

WildcardSelector:
	{WildcardSelector} '*';

Filter returns XExpression:
	'[' XExpression ']';

Setting returns XExpression:
	  XExpression ';' 
	| {XAssignment} assignable=FeatureReference feature=[JvmIdentifiableElement|OpSettingAssign] value=XExpression ';';

OpSettingAssign:
	':';

FeatureReference returns XFeatureCall:
	feature=[JvmIdentifiableElement];

ColorLiteral:
	(RGB | ColorConstant) ({Gradient.colors+=current} colors+=(RGB | ColorConstant)+ percents+=Percent*)?;

ColorConstant:
	'$' constant=[JvmIdentifiableElement];

RGB:
	hex?='#' value = HEXINT
  | '#' '(' red=INT ',' green=INT ',' blue=INT ')'
;

Percent:
  value = INT '%'
;
	
HEXINT returns EInt:
  INT ID? | ID
;
	
XLiteral returns XExpression:
	ColorLiteral |
	XClosure |
	XBooleanLiteral |
	XIntLiteral |
	XNullLiteral |
	XStringLiteral |
	XTypeLiteral
;

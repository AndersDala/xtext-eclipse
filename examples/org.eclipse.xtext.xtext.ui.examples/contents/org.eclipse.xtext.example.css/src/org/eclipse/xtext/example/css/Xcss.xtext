grammar org.eclipse.xtext.example.css.Xcss with org.eclipse.xtext.xbase.Xbase

generate xcss "http://www.eclipse.org/xtext/example/css/Xcss"
import "http://www.eclipse.org/xtext/xbase/Xbase"
import "http://www.eclipse.org/xtext/common/JavaVMTypes"

StyleSheet:
	rules+=StyleRule*;

StyleRule:
	selectors+=Selector+ '{'
		settings+=Setting+
	'}';

Selector:
	(TypeSelector | WildcardSelector) filter=Filter?;

_JvmTypeReference returns JvmTypeReference:
  TypeSelector
;

TypeSelector:
	type=[JvmType|QualifiedName];

WildcardSelector:
	{WildcardSelector} '*';

Filter:
	'[' condition=XExpression ']';

Setting returns XBinaryOperation:
	{Setting}
	params+=FeatureReference feature=[JvmIdentifyableElement|OpAssign] params+=XExpression ';';

OpAssign:
	':';

FeatureReference returns XSimpleFeatureCall:
	feature=[JvmIdentifyableElement];

CssLiterals returns XExpression:
	FontLiteral | ColorLiteral | SizeLiteral;

FontLiteral:
	{FontLiteral}
	('font'? name=StringOrID | 'font')
	(
	  (italic?='I')?
	& (bold?='B')?
	& (size?=SizeLiteral)?
	);

StringOrID:
	STRING | ID;

ColorLiteral:
	ColorConstant | RGB;

ColorConstant:
	name=ID;

RGB:
	'#' color=INT;

SizeLiteral:
	value=INT unit=SizeUnit;

enum SizeUnit:
	em | pt | px | percent='%';

XPrimaryExpression returns XExpression:
	CssLiterals |
	XClosure |
	XBooleanLiteral |
	XIntLiteral |
	XNullLiteral |
	XStringLiteral |
	XTypeLiteral |
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	XFeatureCall |
	XIfExpression |
	XForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XCastedExpression |
	XThrowExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression;
